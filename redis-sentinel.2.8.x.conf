# Redis をデーモンで動かす場合は yes を指定します。
# デーモンとして動作する場合、Redis は pid を pidfile で指定したファイルに書き込みます。
daemonize yes

# デーモンとして起動するときの pid ファイル
pidfile /var/run/redis/redis-sentinel.pid

# Sentinel がコネクションを受け付けるポート。デフォルトは 26379
port 26379

# ログファイル名 # {{{
# "stdout" を指定するとRedisは標準出力にログを出力します。
# ただし、デーモンとして起動しているときに標準出力にログを出そうとしても、
# /dev/null に出力されてしまうので注意してください。 # }}}
logfile /var/log/redis/redis.log

# Sentinel のモニタ設定 # {{{
# モニタする master を設定します。少なくとも <quorum> の数に sentinel の定足数が達した場合、
# O_DOWN（Objectively Down）と判定します。
#
# 書式は以下です。
#
# sentinel monitor <master-name> <ip> <redis-port> <quorum>
#
# ODOWN の定足数がどのようなものであっても、フェイルオーバーを開始するためには
# 既知の Sentinel の過半数から選出される必要があり、過半数に満たない場合は
# フェイルオーバーを実行することはできません。
#
# master 名は特殊文字やスペースを含めるべきではありません。
# 有効な文字は A-z 0-9 と ".-_" のみです。 # }}}
sentinel monitor mymaster 127.0.0.1 6379 2

# Sentinel の認証パスワード # {{{
# 書式は以下です。
#
# sentinel auth-pass <master-name> <password>
#
# master と slave の認証パスワードを設定します。
# Redis インスタンスにパスワードが設定されている場合に有用です。
# パスワード認証が slave でも使用されている場合に Sentinel で master と slave を
# モニタできるようにしたいのであれば、 master と slave それぞれに別々のパスワードを
# 設定することはできません。
#
# しかし、認証を要求しない Redis インスタンスと認証を要求するインスタンスを
# 混在させることも可能です（パスワードがすべてのインスタンスで同一の場合にのみ可能です）。
# AUTH コマンドは認証が無効化されている場合でも Redis の動作に影響を与えないからです。 # }}}
# sentinel auth-pass mymaster MySUPER--secret-0123passw0rd

# master/slave のダウン検知後、S_DOWN(Subjectively Down) に移行するまでの時間（ミリ秒）# {{{
# master （もしくは slave や sentinel） S_DOWN（Subjectively Down）とみなされるまでの
# 時間を指定します（ミリ秒）。これは指定の時間の間に連続して PING 応答がないもの該当します。
# Sentinel が DOWN を検知してからのフェイルオーバーを実行するまでのアイドルタイムです。
# 尚、実際に master の切り替えが発生するまでに 5~15 秒の間でランダムな待ち時間が発生します。
#
# 書式は以下です。
# sentinel down-after-milliseconds <master-name> <milliseconds>
#
# デフォルトは 30 秒です。# }}}
sentinel down-after-milliseconds mymaster 5000

# slave を masterに昇格させた後、同時にいくつの slave と同期させるかの設定 # {{{
# 書式は以下です。
#
# sentinel parallel-syncs <master-name> <numslaves>
#
# フェイルオーバー処理実行時に同時に同期させる slave の数を指定します。
# master との同期実行中に同時にすべての slave が使用不能にならないようにする為には、
# 小さめの値を指定してください。 1 を指定した場合には同期実行中に1台だけ
# 使用不可になるということです。 # }}}
sentinel parallel-syncs mymaster 1

# フェイルオーバーのタイムアウト（ミリ秒）# {{{
# 書式は以下です。
# sentinel failover-timeout <master-name> <milliseconds>
#
# フェイルオーバーのタイムアウトをミリ秒で指定します。
# この値は様々な場所で利用されます。
#
# - 既にファイルオーバーを試みている同一の master に対して Sentinel が再度
#   フェイルオーバー処理を試みるまでの時間。この 2 倍の値が使用されます。
#
# - Sentinel の現在の構成に従って誤った master に レプリケーションしている
#   slave が強制的に正しい master に対してレプリケーションされるまでの時間。
#   実際のフェイルオーバーのタイムアウト時間です。
#  （ カウントは Sentinel が誤設定を検出した瞬間から開始されます。）
#
# - フェイルオーバーを実行中だが設定の変更を生成することができなかった場合に、
#   実行をキャンセルするまでの時間。
#   （SLAVEOF NO ONE が slave から昇格するノードに認識されない場合です。）
#
# - フェイルオーバー実行中に全ての slave が新しい master の slave として再構成される
#   までの最大待ち時間。 この時間が経過しても Sentinel によって slave の再構成処理は
#   実行されますが、その場合 parallel-syncs の指定通りの動作にはなりません。
#
# デフォルトの値は 3分 です（180000）。 # }}}
sentinel failover-timeout mymaster 180000

# スクリプトの実行 # {{{
#
# sentinel notification-script と sentinel reconfig-script は
# システム管理者への通知とフェイルオーバー実行後の設定の更新を
# クライアントへ通知する目的で使用します。
# スクリプトは以下のルールに基づいてエラーハンドリングが可能です。
#
# スクリプトの "1" のコードを返した場合最大試行回数（現在は10）に達した後処理を中断します。
#
# スクリプトが "2" 以上のコードで終了した場合、処理は中断されなかったことを意味します。
#
# シグナルを受け取ることでスクリプトの処理が終了させられた場合の挙動は
# コード 1 で終了する場合と同じです。
#
# 1つのスクリプトの最大実行時間は 60 秒です。この時間に達した場合、
# SIGKILL によってスクリプトの実行は途中で終了させられます。 # }}}

# NOTIFICATION スクリプト # {{{
# 書式は以下です。
#
# sentinel notification-script <master-name> <script-path>
#
# WARNING レベルで発生する任意の sentinel のイベント時に指定のスクリプトが実行されます。
# （-sdown, -odown など）
# このスクリプトによりモニタしている Redis のシステムに異常があるということを、
# システム管理者にEメールや SMS やメッセージングシステムを用いて通知するのがよいでしょう。
#
# スクリプトは2つの引数を取って呼び出されます。1つ目はイベントタイプで2つ目はイベントの定義です。
# このオプションが有効化されている場合、 Sentinel を開始する時点で対象のスクリプトが存在して
# 実行可能な権限が付与されている必要があります。 # }}}
# sentinel notification-script mymaster /var/redis/notify.sh

# CLIENTS RECONFIGURATION スクリプト # {{{
# 書式は以下です。
#
# sentinel client-reconfig-script <master-name> <script-path>
#
# フェイルオーバーによって master が変更された時に、
# このスクリプトによってクライアントに対して構成が変更され master 変わったことを通知します。
#
# スクリプトには以下の引数が渡されます。
#
# <master-name> <role> <state> <from-ip> <from-port> <to-ip> <to-port>
#
# <state> : 常に "failover"
# <role>  : "leader" or "observer"
#
# from-ip, from-port, to-ip, to-port はフェイルオーバー前の master と新しい master に
# 接続してやりとりを行うのに使用されます。
#
# このスクリプトは複数同時に呼び出されても動作可能であるようにしておく必要があります。 # }}}
# sentinel client-reconfig-script mymaster /var/redis/reconfig.sh
