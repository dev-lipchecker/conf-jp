# Redis をデーモンで動かす場合は yes を指定します。
# デーモンとして動作する場合、Redis は pid を pidfile で指定したファイルに書き込みます。
daemonize yes

# デーモンとして起動するときの pid ファイル
pidfile /var/run/redis/redis-sentinel.pid

# Sentinel がコネクションを受け付けるポート。デフォルトは 26379
port 26379

# ログファイル名 # {{{
# "stdout" を指定するとRedisは標準出力にログを出力します。
# ただし、デーモンとして起動しているときに標準出力にログを出そうとしても、
# /dev/null に出力されてしまうので注意してください。 # }}}
logfile /var/log/redis/redis.log

# Sentinel のモニタ設定 # {{{
# モニタする slave を設定します。少なくとも <quorum> の数に sentinel の定足数が達した場合、
# O_DOWN（Objectively Down）と判定します。
#
# 書式は以下です。
#
# sentinel monitor <master-name> <ip> <redis-port> <quorum>
#
# master 名は特殊文字やスペースを含めるべきではありません。
# 有効な文字は A-z 0-9 と ".-_" のみです。 # }}}
sentinel monitor mymaster 127.0.0.1 6379 2

# Sentinel の認証パスワード # {{{
# 書式は以下です。
#
# sentinel auth-pass <master-name> <password>
#
# master と slave の認証パスワードを設定します。
# Redis インスタンスにパスワードが設定されている場合に有用です。
# パスワード認証が slave でも使用されている場合に Sentinel で master と slave を
# モニタできるようにしたいのであれば、 master と slave それぞれに別々のパスワードを
# 設定することはできません。
#
# しかし、認証を要求しない Redis インスタンスと認証を要求するインスタンスを
# 混在させることも可能です（パスワードがすべてのインスタンスで同一の場合にのみ可能です）。
# AUTH コマンドは認証が無効化されている場合でも Redis の動作に影響を与えないからです。 # }}}
# sentinel auth-pass mymaster MySUPER--secret-0123passw0rd

# master/slave のダウン検知後、S_DOWN(Subjectively Down) に移行するまでの時間（ミリ秒）# {{{
# master （もしくは slave や sentinel） S_DOWN（Subjectively Down）とみなされるまでの
# 時間を指定します（ミリ秒）。これは指定の時間の間に連続して PING 応答がないもの該当します。
# Sentinel が DOWN を検知してからのフェイルオーバーを実行するまでのアイドルタイムです。
# 尚、実際に master の切り替えが発生するまでに 5~15 秒の間でランダムな待ち時間が発生します。
#
# 書式は以下です。
# sentinel down-after-milliseconds <master-name> <milliseconds>
#
# デフォルトは 30 秒です。# }}}
sentinel down-after-milliseconds mymaster 5000

# Sentinel がフェイルオーバーを実行するかどうかの設定
# sentinel can-failover <master-name> <yes|no>
sentinel can-failover mymaster yes

# slave を masterに昇格させた後、同時にいくつの slave と同期させるかの設定 # {{{
# 書式は以下です。
#
# sentinel parallel-syncs <master-name> <numslaves>
#
# フェイルオーバー処理実行時に同時に同期させる slave の数を指定します。
# master との同期実行中に同時にすべての slave が使用不能にならないようにするためには、
# 小さめの値を指定してください。
# 1 を指定した場合には同期実行中に1台だけ使用不可になるということです。 # }}}
sentinel parallel-syncs mymaster 1

# フェイルオーバーのタイムアウト（ミリ秒）# {{{
# 書式は以下です。
# sentinel failover-timeout <master-name> <milliseconds>
#
# フェイルオーバーのタイムアウトをミリ秒で指定します。
# フェイルオーバーの実行時に進捗がないままこの時間経過した場合、
# たとえ接続されているすべての slave が新しい master との間に正しくレプリケーションが
# 構成されたていなかったとしても、Sentinel によって処理が終了したとみなされます。
# （しかし、"ベストエフォート"な動作として、その前にすべての slave に対して
# SLAVEOF コマンドの送信を実行します。）
#
# また、ここで設定された値の 25% の時間が経過してもフェイルオーバー処理に進展がないまま
# Sentinel のリーダーの切り替えがあった場合（リーダーとして選出されているのに
# フェイルオーバー処理を開始しなかった場合に発生します）、Sentinel はリーダーとしての処理を
# 別のノードに引き継ぐことでフェイルオーバー処理を引き続き実行します。
#
# デフォルトの値は 15分 です（900000）。 # }}}
sentinel failover-timeout mymaster 900000

# スクリプトの実行 # {{{
#
# notification-script と reconfig-script はシステム管理者への通知とフェイルオーバー実行後の
# 設定の更新をクライアントへ通知する目的で使用します。
# スクリプトは以下のルールに基づいてエラーハンドリングが可能です。
# sentinel notification-script and sentinel reconfig-script are used in order
# to configure scripts that are called to notify the system administrator
# or to reconfigure clients after a failover. The scripts are executed
# with the following rules for error handling:
#
# スクリプトの "1" のコードを返した場合最大試行回数（現在は10）に達した後処理を中断します。
#
# スクリプトが "2" 以上のコードで終了した場合、処理は中断されなかったことを意味します。
#
# シグナルを受け取ることでスクリプトの処理が終了させられた場合の挙動は
# コード 1 で終了する場合と同じです。
#
# 1つのスクリプトの最大実行時間は 60 秒です。この時間に達した場合、
# SIGKILL によってスクリプトの実行は途中で終了させられます。 # }}}

# NOTIFICATION スクリプト # {{{
# 書式は以下です。
#
# sentinel notification-script <master-name> <script-path>
#
# WARNING レベルで発生する任意の sentinel のイベント時に指定のスクリプトが実行されます。
# （-sdown, -odown など）
# このスクリプトによりモニタしている Redis のシステムに異常があるということを、
# システム管理者にEメールや SMS やメッセージングシステムを用いて通知するのがよいでしょう。
#
# スクリプトは2つの引数を取って呼び出されます。1つ目はイベントタイプで2つ目はイベントの定義です。
# このオプションが有効化されている場合、 Sentinel を開始する時点で対象のスクリプトが存在して
# 実行可能な権限が付与されている必要があります。 # }}}
# sentinel notification-script mymaster /var/redis/notify.sh

# CLIENTS RECONFIGURATION スクリプト # {{{
# 書式は以下です。
#
# sentinel client-reconfig-script <master-name> <script-path>
#
# フェイルオーバーが開始、終了、中止した時に実行することができるスクリプトです。
# このスクリプトによってクライアントに対して構成が変更され master 変わったことを通知します。
# When the failover starts, ends, or is aborted, a script can be called in
# order to perform application-specific tasks to notify the clients that the
# configuration has changed and the master is at a different address.
#
# スクリプトは以下の状況で呼び出されます。
#
# フェイルオーバーの開始（slave が既に master に昇格した）
# フェイルオーバーの完了（すべての slave の構成が更新された）
# フェイルオーバーの中止（フェイルオーバー開始時にスクリプトが呼び出されていて、
#                         再度アドレスが替わった場合が該当）
#
# スクリプトには以下の引数が渡されます。
#
# <master-name> <role> <state> <from-ip> <from-port> <to-ip> <to-port>
#
# <state> : "start" , "end" or "abort"
# <role>  : "leader" or "observer"
#
# from-ip, from-port, to-ip, to-port はフェイルオーバー前の master と新しい master に
# 接続してやりとりを行うのに使用されます。この場合の state は "start" と "end" が該当します。
#
# "abort" の場合フェイルオーバーが中止されるため、"from" に slave から昇格した
# 新しい master のアドレスが入り、"to" に元々の旧 master のアドレスが入ります。
#
# このスクリプトは複数同時に呼び出されても動作可能であるようにしておく必要があります。 # }}}
# sentinel client-reconfig-script mymaster /var/redis/reconfig.sh
